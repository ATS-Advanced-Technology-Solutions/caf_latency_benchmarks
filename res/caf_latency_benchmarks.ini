[benchmark]
	;;; benchmark_type         	= "PARALLEL"			##	--benchmark_type,t			Benchmark type, currently ["SERIAL"|"PARALLEL"] (default is "SERIAL")
	;;; payload_type         	= "NONE"				##	--payload_type,P			Benchmark type: ["NONE"|"COMPLEX"] (default is "NONE")
	;;; tracking_type         	= "LATENCY"				##	--bechmark.tracking_type,K	Benchmark tracking type: ["LATENCY"|"XTIMES"] (default is "LATENCY")	
	;;; pipeline_actors        	= 10					##	--pipeline_actor,N			Number of actors in the benchmark's pipeline (default is 2)
	;;; duration				= 20					##	--duration,d				Benchmark's duration (seconds), 0 for endless benchmark (default is 10s)
	;;; result_path	 			= "./trace" 			##	--result_path				Folder path in which store output files (default is ./trace/)
	;;; extension               = "txt"					##  --extension					Extension of the output file (default is csv)
	;;; output_file 			= "benchmark_result"	##  --output_file	 			File name in which store the results (_serial or _parallel will be added depending on the benchmark type)
	;;; detach		 			= "detach"				##  --detach		 			Actor chain number, included in [0,N-1] interval, to spawn in detached mode (default is UINT_MAX)
	;;; forth_and_back 			= "forth_and_back"		##  --forth_and_back 			Defines message route (default is 0)

	benchmark_type        = "PARALLEL"
	payload_type 		  = "COMPLEX"
	tracking_type 		  = "XTIMES"
	pipeline_actors       = 10
	duration              = 20
	result_path           = "runs/"
	extension             = "txt"
	output_file           = "benchmark_result"
	detach                = 6
	forth_and_back        = 0

	
[parallel]
	;;; rate					= 1e4					## --rate				Frequency of messages introduced into the benchmark's pipeline (messages per second, default is 100.0)
	;;; chains_number			= 1						## --chains_number		Number of chains to built in 1 to N configuration (default is 1)
	;;; sending_order           = 1                     ## --sending_order      Message sending order to chains' heads (0 = random, 1 = Round Robin = default)
	
	rate          = 1e4
	chains_number = 1
	sending_order = 1

[payload]
	;;; string_length			= 16                    ## --payload.string_length		   The length of the string into a complex message (default is 16)
	;;; vector_size				= 500                   ## --payload.vector_size           The size of the vector<char> into a complex message (default is 500)
	;;; copy_msg                = 0                     ## --payload.copy_msg arg          Flag for copy complex messages instead of moving them (default is 0)
	;;; batch_size              = 0                     ## --payload.batch_size            Batch size in order to obtain a square wave in output (default is 0)
	;;; actor_computing_time    = 0                     ## --payload.actor_computing_time  Actor work time (nanoseconds) (default is 0)
  
	string_length        = 16
	vector_size	         = 500
	copy_msg             = 0
	batch_size           = 0
	actor_computing_time = 0

	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CAF configuration
	
[work-stealing]
	; aggressive-poll-attempts = 10000000
	; aggressive-steal-interval = 5
	; moderate-poll-attempts = 50000000
	; moderate-steal-interval = 5
	moderate-sleep-duration = 1
	relaxed-steal-interval = 5
	relaxed-sleep-duration = 200
